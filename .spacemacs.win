;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     windows-scripts
     html
     csv
     graphviz
     markdown
     python
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     auto-completion
     ;; better-defaults
     c-c++
     emacs-lisp
     gtags
     git
     ;; markdown
     org
     ranger
     semantic
     themes-megapack
     ;; just one or the other, not both
     ;;vxworks6
     ;;vxworks7
     shell
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     ;; spell-checkin
     ;; syntax-checking
     ;; version-control
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(smartparens org-projectile evil-unimpaired)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;;
   ;; disable new scrollbar show whilst scrolling 'feature'
   ;;
   dotspacemacs-scroll-bar-while-scrolling nil

   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. (default t)
   dotspacemacs-check-for-update t
   ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
   ;; variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
   ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
   ;; unchanged. (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `recents-by-project' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   ;; The exceptional case is `recents-by-project', where list-type must be a
   ;; pair of numbers, e.g. `(recents-by-project . (7 .  5))', where the first
   ;; number is the project limit and the second the limit on the recent files
   ;; within a project.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; Number of recent files to show in the startup buffer. Ignored if
   ;; `dotspacemacs-startup-lists' doesn't include `recents'. (default 5)
   dotspacemacs-startup-recent-list-size 5
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(sanityinc-tomorrow-eighties
                         toxi
                         junio
                         zenburn
                         twilight
                         sanityinc-tomorrow-night
                         spacemacs-dark
                         spacemacs-light
                         solarized-light
                         solarized-dark
                         leuven
                         monokai)
   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   ;; EPL:HSS just get blocks 
   dotspacemacs-default-font '("Source Code Pro"
                               :size 12
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m)
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; (Not implemented) dotspacemacs-distinguish-gui-ret nil
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   ;; dotspacemacs-command-key ":"
   ;; If non nil `Y' is remapped to `y$'. (default t)
   dotspacemacs-remap-Y-to-y$ t
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   ;; `find-contrib-file' (SPC f e c) are replaced. (default nil)
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-micro-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   ;; EPL:HSS quit moaning about my large Audit Trails
   dotspacemacs-large-file-size 5
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put almost
any user code here.  The exception is org related code, which should be placed
in `dotspacemacs/user-config'."

  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."

  ;;
  ;; disable stupid dots  in org-superstar-mode
  ;;
  (setq org-hide-leading-stars nil)
  (setq org-superstar-leading-bullet ?\s)

  ;; Emacs 27.2 has electric-indent-mode enabled by default, which is annoying and
  ;; requires two deletes in org mode to start writing.
  ;; this disbles it
  ;;
  ;;  https://www.reddit.com/r/orgmode/comments/n9pokq/two_orgmode_bugs_ive_noticed_in_new_emacs_272/
  ;;
  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))


  ;; Backups
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  (setq backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        make-backup-files t)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Remove C-z, minimise
  ;;
  (global-set-key "\C-x\C-z" nil)

  ;; Remove the binding of C-x C-c, which normally exits emacs.
  ;; It's easy to hit this by mistake, and that can be annoying.
  ;; Under X, you can always quit with the "Exit Emacs" option on
  ;; the File menu.
  (global-set-key "\C-x\C-c" nil)

  ;; Show file path in frame titme
  ;;
  (setq-default frame-title-format "%b (%f)")

  (setq large-file-warning-threshold nil)
  (setq default-tab-width 8)
  (setq indent-tabs-mode nil)

  ;; Make all yes-or-no questions as y-or-n
  ;;
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; auto line length for text mode
  ;;
  (setq text-mode-hook 'turn-on-auto-fill)

  ;; get rid of the annoying grey space boxes
  ;; ED: doesnt seem to make a difference
  (setq-local show-trailing-whitespace nil)


  ;; try a local grep maps to SPC f G
  (spacemacs/set-leader-keys "fG" 'lgrep)

  ;; ahs-forward keybind has been removed since spacemacs 0.200
  (global-set-key (kbd "M-<left>") #'ahs-backward)
  (global-set-key (kbd "M-<right>") #'ahs-forward)
  (global-set-key (kbd "M-S-<left>") #'ahs-backward-definition)
  (global-set-key (kbd "M-S-<right>") #'ahs-forward-definition)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; function navigation
  ;;
  (global-set-key [C-down] 'fwd-c-func)
  (defun fwd-c-func ()
    "Go forward (down) to the beginning of a C function"
    (interactive)
    (end-of-defun)
    (end-of-defun)
    (beginning-of-defun))

  (global-set-key [C-up] 'bwd-c-func)
  (defun bwd-c-func ()
    "Go backwards (up) to the beginning of a C function"
    (interactive)
    (beginning-of-defun))

  ;; error navigation
  ;;
  ;; causes mismatched ), unless I escape the comma \,
  (global-set-key [(control .)] 'next-error)
  (global-set-key [(control \,)] 'previous-error)
  ;; need this to override evil-repeat-pop
  (define-key evil-normal-state-map [(control .)]  'next-error)
  (global-set-key [f12] 'revert-buffer)

  ;;
  ;; *path stuff
  ;;

  ;;
  ;; rgrep uses the W32 find .exe, which cant be deleted. So modify the path to place
  ;; cygwin first.
  ;;
  ;; This seems to cause problems with building for vxworks, paths end up with /cygdrive/c
  ;;
  (setenv "PATH"
          (concat
           "C:/cygwin64/bin;"
           "C:/Program Files (x86)/glo665wb/bin;"
            (getenv "PATH")))

  ;; add W32 gnu global
  (add-to-list 'exec-path "C:/Program Files (x86)/glo665wb/bin")

  ;; same for diff, so adding here
  (add-to-list 'exec-path "C:/cygwin64/bin")

  ;; add the win10 git
  (add-to-list 'exec-path "C:/Program Files/Git/cmd/git")

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; grep fix : stops GREP_OPTIONS warning
  ;;
  ;;(load-file "~/.emacs.d/lisp/grep.elc")

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; gtags src navigation
  ;;

  ;; this has been replaced in > v0.200
  (global-unset-key "\M-#")
  (global-unset-key "\M-]")
  (global-set-key "\M-]" 'helm-gtags-find-tag-from-here)
  (global-set-key "\M-[" 'helm-gtags-pop-stack)
  (global-set-key "\M-#" 'helm-gtags-find-rtag)

  ;; for org mode, use the same key mappings as gtags, above
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-]") 'org-open-at-point)
    (define-key org-mode-map (kbd "M-[") 'org-mark-ring-goto))

  ;;keep find helm rtag
  (with-eval-after-load 'ggtags
    (define-key ggtags-mode-map "\M-#" 'helm-gtags-find-rtag)
    (define-key ggtags-mode-map "\M-]" 'helm-gtags-find-tag-from-here))

  ;; great for getting a list of function defined in a file
  (spacemacs/set-leader-keys "s i" 'helm-semantic-or-imenu)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Save the current filename into the clipboard. Useful for documenting and
  ;; adding links into org
  ;;
  (defun put-file-name-on-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (with-temp-buffer
          (insert filename)
          (clipboard-kill-region (point-min) (point-max)))
        (message filename))))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Keyboard macro key settings
  ;; Here we define our own function and then bind a key to it.
  ;;
  (defun start-or-end-kbd-macro ()
    ;; A doc string.  This is optional.
    "Start defining a keyboard macro, or stop if we're already defining."
    ;; IMPORTANT: Any function bound to a key MUST have an interactive spec,
    ;; usually just the following line:
    (interactive)
    (if defining-kbd-macro
        (end-kbd-macro)
      (start-kbd-macro nil)))

  (global-set-key [f8]  'start-or-end-kbd-macro)
  (global-set-key [f9]  'call-last-kbd-macro) ;; C-x e



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; *org mode
  ;;
  ;;
  ;; quite a lot of stuff here taken from http://doc.norang.ca/org-mode.html
  ;;

  (require 'org-install)
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  ;;(define-key global-map "\C-cl" 'org-store-link)
  ;;(define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)

  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Change tasks to OPEN when clocking in
  ;; TODO have to port this over
  (setq org-clock-in-switch-to-state 'ed-clock-in-to-open)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  ;;(setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Do not prompt to resume an active clock
  (setq org-clock-persist-query-resume nil)
  ;; Enable auto clock resolution for finding open clocks
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)

  ;; since org 8.5.2 need this for 24 hrs format
  (setq org-duration-format (quote h:mm))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "OPEN(o)" "WAITING(w)" "|" "CANCELLED(c)" "DONE(d)")))

  (setq org-todo-keyword-faces
        '(("TODO" . "red") ("OPEN" . "yellow") ("WAITING" . "orange") ("CANCELLED" . "slate grey") ("DONE" . "DarkTurquoise")))

  ;; assign tags to tasks based on state changes
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("DONE" ("WAITING") ("CANCELLED")))))


  ;; want org-indent-mode, which nicely indents subheadings
  (setq org-startup-indented t)

  ;;
  ;; format string used when creating CLOCKSUM lines and when generating a
  ;; time duration (avoid showing days)
  ;;
  (setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;;  insert a * and then a timestamp
  ;;
  (defun ed-insert-org-timestamp ()
    "Put an orgmode timestamp into an org '*' timestamp"
    (interactive)
    (insert "* ")
    (org-time-stamp-inactive))

  ;; lets use f1 for all org stuff, help is still C-h
  (global-unset-key [f1])
  (global-unset-key [f2])
  (global-set-key (kbd "<f2>") 'org-agenda)
  (global-set-key (kbd "<f1> t") 'ed-insert-org-timestamp)
  (global-set-key (kbd "<f1> i") 'ed-punch-in)
  (global-set-key (kbd "<f1> o") 'ed-punch-out)


  (defun ed-punch-in (arg)
    "Start continuous clocking and set the default task to the selected task.
  If no task is selected set the Organization task as the default task."
    (interactive "p")
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;;  We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
             (org-agenda-clock-in '(16))
           (ed-clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
        ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)))
            (org-clock-in '(16))
          (ed-clock-in-organization-task-as-default)))))

  (defun ed-punch-out ()
    (interactive)
    (when (org-clock-is-active)
      (org-clock-out)))

  (defvar ed-organization-task-id "cb8f13e6-4142-489b-9a97-247ba85e9102")

  (defun ed-clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find ed-organization-task-id 'marker)
      (org-clock-in '(16))))


  (defun ed-clock-in-to-open (kw)
    "Switch a task from TODO to OPEN when clocking in."
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO")))
        "OPEN"))))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; enable org mode babel languages
  ;;
  ;;
  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     ))

  ;;
  ;; C-mode customisation
  ;;
  ;;
  ;;  use M-x c-set-style
  ;;

  ;; need font locking regardless
  (setq font-lock-maximum-size 1000000)

       ;; Here's a sample .emacs file that might help you along the way.  Just
       ;; copy this region and paste it into your .emacs file.  You may want to
       ;; change some of the actual values.

       ;; C-c C-o changes indentation for a symbol
       ;; C-c C-s shows syntactic symbol

       (defconst my-c-style
         '((c-tab-always-indent        . t)
           (c-comment-only-line-offset . 0)
           (c-hanging-braces-alist     . ((substatement-open after)
                                          (brace-list-open)))
           (c-hanging-colons-alist     . ((member-init-intro before)
                                          (inher-intro)
                                          (case-label after)
                                          (label after)
                                          (access-label after)))
           (c-cleanup-list             . (scope-operator
                                          empty-defun-braces
                                          defun-close-semi))
           (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                          (substatement-open . 0)
                                          (case-label        . 4)
                                          (block-open        . 0)
  						(label . 4)
  						(class-open  . 0)
  						(class-close . 0)
  						(defun-open  . 0)
  						(defun-close . 0)
  						(defun-block-intro . 4)
  						(topmost-intro     . 0)
  						(topmost-intro-cont . 0)
  						(comment-intro     . 0)
  						(knr-argdecl-intro . -)))
           (c-echo-syntactic-information-p . t)
           )
         "My C Programming Style")

       (defconst wrs-c-style
         '((c-tab-always-indent        . t)
           (c-comment-only-line-offset . 0)
           (c-hanging-braces-alist     . ((substatement-open after)
                                          (brace-list-open)))
           (c-hanging-colons-alist     . ((member-init-intro before)
                                          (inher-intro)
                                          (case-label after)
                                          (label after)
                                          (access-label after)))
           (c-cleanup-list             . (scope-operator
                                          empty-defun-braces
                                          defun-close-semi))
           (c-offsets-alist            . ((arglist-close . c-lineup-arglist-close-under-paren)
  						(topmost-intro     . 0)
  						(topmost-intro-cont . 4)
  						(class-open  . 4)
  						(class-close . 4)
  						(defun-open  . 4)
  						(defun-close . 0)
  						(defun-block-intro . 0)
  						(substatement-open . 4)
  						(brace-list-open . 4)
  						(statement-block-intro . 0)
  						(case-label        . 0)
  						(statement-case-intro . 4)
  						(block-open        . 0)
  						(arglist-intro . 0)
  						(knr-argdecl-intro . -)))
           (c-echo-syntactic-information-p . t)
           )
         "WRS Programming Style")


       ;; offset customizations not in my-c-style
       (setq c-offsets-alist '((member-init-intro . ++)))

       (c-add-style "personal" my-c-style t)
       (c-add-style "wrs" wrs-c-style t)

       ;; Customizations for all modes in CC Mode.
       (defun my-c-mode-common-hook ()
         ;; add my personal style and set it for the current buffer
         ;; other customizations
         (setq tab-width 8
               ;; this will make sure spaces are used instead of tabs
               indent-tabs-mode nil)
         (setq show-trailing-whitespace nil)
         ;; we like auto-newline and hungry-delete
         ;; Ed: I bloody hate it!
         ;;(c-toggle-auto-hungry-state 0)
         ;; keybindings for all supported languages.  We can put these in
         ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
         ;; java-mode-map, idl-mode-map, and pike-mode-map inherit from it.
         (define-key c-mode-base-map "\C-m" 'c-context-line-break)
         )

       (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

       ;;
       ;; set the default style
       ;;
       (setq c-default-style "personal")

       ;;
       ;; Insert some WR function headers
       ;;
       (defun insert-wr-func-header ()
         "Insert a WindRiver function header at cursor point"
         (interactive)
         (insert "/******************************************************************************\n")
         (insert "*\n")
         (insert "*\n")
         (insert "*\n")
         (insert "* RETURNS: \n")
         (insert "*/\n\n"))

       (global-set-key [f5] 'insert-wr-func-header)

)
;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(magit-diff-use-overlays nil)
 '(make-backup-files t)
 '(org2blog/wp-keep-new-lines t)
 '(show-trailing-whitespace nil)
 '(temporary-file-directory "c:/Home/backup/")
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(vc-annotate-background nil))
