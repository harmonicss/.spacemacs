;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     auto-completion
     ;; better-defaults
     c-c++
     emacs-lisp
     git
     gtags
     helm
     ;; lsp
     ;; markdown
     multiple-cursors
     (org :variables
          org-enable-sticky-header t)
     ;; dont think this works
     ;; org2blog
     python
     ranger
     semantic
     themes-megapack
     ;; just one or the other, not both
     ;;vxworks6
     ;;vxworks7
     shell
     (shell :variables
             shell-default-height 30
             shell-default-position 'bottom)
     ;; spell-checking
     ;; syntax-checking
     ;; version-control
     treemacs)


   ;; List of additional packages that will be installed without being wrapped
   ;; in a layer (generally the packages are installed only and should still be
   ;; loaded using load/require/use-package in the user-config section below in
   ;; this file). If you need some configuration for these packages, then
   ;; consider creating a layer. You can also put the configuration in
   ;; `dotspacemacs/user-config'. To use a local version of a package, use the
   ;; `:location' property: '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages '()

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;;
   ;; disable new scrollbar show whilst scrolling 'feature'
   ;;
   dotspacemacs-scroll-bar-while-scrolling nil

   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=$HOME/.emacs.d/.cache/dumps/spacemacs-27.1.pdmp
   ;; (default (format "spacemacs-%s.pdmp" emacs-version))
   dotspacemacs-emacs-dumper-dump-file (format "spacemacs-%s.pdmp" emacs-version)

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; Set `read-process-output-max' when startup finishes.
   ;; This defines how much data is read from a foreign process.
   ;; Setting this >= 1 MB should increase performance for lsp servers
   ;; in emacs 27.
   ;; (default (* 1024 1024))
   dotspacemacs-read-process-output-max (* 1024 1024)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. Spacelpa is currently in
   ;; experimental state please use only for testing purposes.
   ;; (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non-nil show the version string in the Spacemacs buffer. It will
   ;; appear as (spacemacs version)@(emacs version)
   ;; (default t)
   dotspacemacs-startup-buffer-show-version t

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `recents-by-project' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   ;; The exceptional case is `recents-by-project', where list-type must be a
   ;; pair of numbers, e.g. `(recents-by-project . (7 .  5))', where the first
   ;; number is the project limit and the second the limit on the recent files
   ;; within a project.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Show numbers before the startup list lines. (default t)
   dotspacemacs-show-startup-list-numbers t

   ;; The minimum delay in seconds between number key presses. (default 0.4)
   dotspacemacs-startup-buffer-multi-digit-delay 0.4

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; If non-nil, *scratch* buffer will be persistent. Things you write down in
   ;; *scratch* buffer will be saved and restored automatically.
   dotspacemacs-scratch-buffer-persistent nil

   ;; If non-nil, `kill-buffer' on *scratch* buffer
   ;; will bury it instead of killing.
   dotspacemacs-scratch-buffer-unkillable nil

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(sanityinc-tomorrow-eighties
                         spacemacs-dark
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font or prioritized list of fonts. The `:size' can be specified as
   ;; a non-negative integer (pixel size), or a floating-point (point size).
   ;; Point size is recommended, because it's device independent. (default 10.0)
   dotspacemacs-default-font '("Source Code Pro"
                               :size 10.0
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m" for terminal mode, "<M-return>" for GUI mode).
   ;; Thus M-RET should work as leader key in both GUI and terminal modes.
   ;; C-M-m also should work in terminal mode, but not in GUI mode.
   dotspacemacs-major-mode-emacs-leader-key (if window-system "<M-return>" "C-M-m")

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Show the scroll bar while scrolling. The auto hide time can be configured
   ;; by setting this variable to a number. (default t)
   dotspacemacs-scroll-bar-while-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but only visual lines are counted. For example, folded lines will not be
   ;; counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers '(:relative t
                               :disabled-for-modes org-mode
                                                   dired-mode)

   ;; Code folding method. Possible values are `evil', `origami' and `vimish'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil and `dotspacemacs-activate-smartparens-mode' is also non-nil,
   ;; `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil smartparens-mode will be enabled in programming modes.
   ;; (default t)
   dotspacemacs-activate-smartparens-mode t

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server nil

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; If nil then Spacemacs uses default `frame-title-format' to avoid
   ;; performance issues, instead of calculating the frame title by
   ;; `spacemacs/title-prepare' all the time.
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Show trailing whitespace (default t)
   dotspacemacs-show-trailing-whitespace t

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; If non-nil activate `clean-aindent-mode' which tries to correct
   ;; virtual indentation of simple modes. This can interfere with mode specific
   ;; indent handling like has been reported for `go-mode'.
   ;; If it does deactivate it here.
   ;; (default t)
   dotspacemacs-use-clean-aindent-mode t

   ;; Accept SPC as y for prompts if non-nil. (default nil)
   dotspacemacs-use-SPC-as-y nil

   ;; If non-nil shift your number row to match the entered keyboard layout
   ;; (only in insert state). Currently supported keyboard layouts are:
   ;; `qwerty-us', `qwertz-de' and `querty-ca-fr'.
   ;; New layouts can be added in `spacemacs-editing' layer.
   ;; (default nil)
   dotspacemacs-swap-number-row nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil

   ;; If nil the home buffer shows the full path of agenda items
   ;; and todos. If non-nil only the file name is shown.
   dotspacemacs-home-shorten-agenda-source nil

   ;; If non-nil then byte-compile some of Spacemacs files.
   dotspacemacs-byte-compile nil

   ;; EPL:HSS quit moaning about my large Audit Trails
   dotspacemacs-large-file-size 5
   ))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first.")


(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump.")


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."

  ;;
  ;; practice lauterbach script mode
  ;;
  (defvar practice-mode-syntax-table nil "Syntax table for `practice-mode'.")

  (setq practice-mode-syntax-table
        (let ( (synTable (make-syntax-table)))
          ;; python style comment: “# …”
          (modify-syntax-entry ?# "<" synTable)
          (modify-syntax-entry ?\n ">" synTable)
          (modify-syntax-entry ?\/ ". 12b" synTable)
          (modify-syntax-entry ?\n "> b" synTable)
          synTable))

  (define-derived-mode practice-mode prog-mode "practice"
    "major mode for editing practice scripts."
    (setq font-lock-defaults (list nil))
    (set-syntax-table practice-mode-syntax-table)
    (setq-local comment-start "# ")
    (setq-local comment-start ";; ")
    (setq-local comment-end "")
    )

  (add-to-list 'auto-mode-alist '("\\.cmm$" . practice-mode))


  ;;
  ;; practice lauterbach script mode
  ;;
  (defvar practice-mode-syntax-table nil "Syntax table for `practice-mode'.")

  (setq practice-mode-syntax-table
        (let ( (synTable (make-syntax-table)))
          ;; C++ stye comments
          (modify-syntax-entry ?\/ ". 12b" synTable)
          (modify-syntax-entry ?\n "> b" synTable)
          synTable))

  (define-derived-mode practice-mode prog-mode "practice"
    "major mode for editing practice scripts."
    (setq font-lock-defaults (list nil))
    (set-syntax-table practice-mode-syntax-table)
    (setq-local comment-start "# ")
    (setq-local comment-start ";; ")
    (setq-local comment-end "")
    )

  (add-to-list 'auto-mode-alist '("\\.cmm$" . practice-mode))


  ;;
  ;; disable stupid dots  in org-superstar-mode
  ;;
  (setq org-hide-leading-stars nil)
  (setq org-superstar-leading-bullet ?\s)

  ;; Emacs 27.2 has electric-indent-mode enabled by default, which is annoying and
  ;; requires two deletes in org mode to start writing.
  ;; this disbles it
  ;;
  ;;  https://www.reddit.com/r/orgmode/comments/n9pokq/two_orgmode_bugs_ive_noticed_in_new_emacs_272/
  ;;
  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))


  ;; Backups
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  (setq backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        make-backup-files t)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Remove C-z, minimise
  ;;
  (global-set-key "\C-x\C-z" nil)

  ;; Remove the binding of C-x C-c, which normally exits emacs.
  ;; It's easy to hit this by mistake, and that can be annoying.
  ;; Under X, you can always quit with the "Exit Emacs" option on
  ;; the File menu.
  (global-set-key "\C-x\C-c" nil)

  ;; Show file path in frame titme
  ;;
  (setq-default frame-title-format "%b (%f)")

  (setq large-file-warning-threshold nil)
  (setq default-tab-width 8)
  (setq indent-tabs-mode nil)

  ;; Make all yes-or-no questions as y-or-n
  ;;
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; auto line length for text mode
  ;;
  (setq text-mode-hook 'turn-on-auto-fill)

  ;; get rid of the annoying grey space boxes
  ;; ED: doesnt seem to make a difference
  (setq-local show-trailing-whitespace nil)


  ;; try a local grep maps to SPC f G
  (spacemacs/set-leader-keys "fG" 'lgrep)

  ;; ahs-forward keybind has been removed since spacemacs 0.200
  (global-auto-highlight-symbol-mode)
  (global-set-key (kbd "M-<left>") #'ahs-backward)
  (global-set-key (kbd "M-<right>") #'ahs-forward)
  (global-set-key (kbd "M-S-<left>") #'ahs-backward-definition)
  (global-set-key (kbd "M-S-<right>") #'ahs-forward-definition)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; function navigation
  ;;
  (global-set-key [C-down] 'fwd-c-func)
  (defun fwd-c-func ()
    "Go forward (down) to the beginning of a C function"
    (interactive)
    (end-of-defun)
    (end-of-defun)
    (beginning-of-defun))

  (global-set-key [C-up] 'bwd-c-func)
  (defun bwd-c-func ()
    "Go backwards (up) to the beginning of a C function"
    (interactive)
    (beginning-of-defun))

  ;; error navigation
  ;;
  ;; causes mismatched ), unless I escape the comma \,
  (global-set-key [(control .)] 'next-error)
  (global-set-key [(control \,)] 'previous-error)
  ;; need this to override evil-repeat-pop
  (define-key evil-normal-state-map [(control .)]  'next-error)
  (global-set-key [f12] 'revert-buffer)


  ;;
  ;; *path stuff
  ;;

  (setenv "PATH"
          (concat
           "C:/Program Files/Git/usr/bin;"
           "C:/Program Files (x86)/glo665wb/bin;"
           (getenv "PATH")))

  ;; add W32 gnu global
  (add-to-list 'exec-path "C:/Program Files (x86)/glo665wb/bin")

  ;; same for diff, so adding here
  (add-to-list 'exec-path "C:/Program Files/Git/usr/bin")

  ;; add the win10 git
  (add-to-list 'exec-path "C:/Program Files/Git/cmd/git")

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; gtags src navigation
  ;;

  ;; this has been replaced in > v0.200
  (global-unset-key "\M-#")
  (global-unset-key "\M-]")
  (global-set-key "\M-]" 'helm-gtags-find-tag-from-here)
  (global-set-key "\M-[" 'helm-gtags-pop-stack)
  (global-set-key "\M-#" 'helm-gtags-find-rtag)

  ;; for org mode, use the same key mappings as gtags, above
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-]") 'org-open-at-point)
    (define-key org-mode-map (kbd "M-[") 'org-mark-ring-goto))

  ;;keep find helm rtag
  (with-eval-after-load 'ggtags
    (define-key ggtags-mode-map "\M-#" 'helm-gtags-find-rtag)
    (define-key ggtags-mode-map "\M-]" 'helm-gtags-find-tag-from-here))

  ;; great for getting a list of function defined in a file
  (spacemacs/set-leader-keys "s i" 'helm-semantic-or-imenu)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Save the current filename into the clipboard. Useful for documenting and
  ;; adding links into org
  ;;
  (defun put-file-name-on-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (with-temp-buffer
          (insert filename)
          (clipboard-kill-region (point-min) (point-max)))
        (message filename))))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Keyboard macro key settings
  ;; Here we define our own function and then bind a key to it.
  ;;
  (defun start-or-end-kbd-macro ()
    ;; A doc string.  This is optional.
    "Start defining a keyboard macro, or stop if we're already defining."
    ;; IMPORTANT: Any function bound to a key MUST have an interactive spec,
    ;; usually just the following line:
    (interactive)
    (if defining-kbd-macro
        (end-kbd-macro)
      (start-kbd-macro nil)))

  (global-set-key [f8]  'start-or-end-kbd-macro)
  (global-set-key [f9]  'call-last-kbd-macro) ;; C-x e



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; *org mode
  ;;
  ;;
  ;; quite a lot of stuff here taken from http://doc.norang.ca/org-mode.html
  ;;

  (require 'org-install)
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  ;;(define-key global-map "\C-cl" 'org-store-link)
  ;;(define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)

  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Change tasks to OPEN when clocking in
  ;; TODO have to port this over
  (setq org-clock-in-switch-to-state 'ed-clock-in-to-open)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  ;;(setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Do not prompt to resume an active clock
  (setq org-clock-persist-query-resume nil)
  ;; Enable auto clock resolution for finding open clocks
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)

  ;; since org 8.5.2 need this for 24 hrs format
  (setq org-duration-format (quote h:mm))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "OPEN(o)" "WAITING(w)" "|" "CANCELLED(c)" "DONE(d)")))

  (setq org-todo-keyword-faces
        '(("TODO" . "red") ("OPEN" . "yellow") ("WAITING" . "orange") ("CANCELLED" . "slate grey") ("DONE" . "DarkTurquoise")))

  ;; assign tags to tasks based on state changes
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("DONE" ("WAITING") ("CANCELLED")))))


  ;; want org-indent-mode, which nicely indents subheadings
  (setq org-startup-indented t)

  ;;
  ;; format string used when creating CLOCKSUM lines and when generating a
  ;; time duration (avoid showing days)
  ;;
  (setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;;  insert a * and then a timestamp
  ;;
  (defun ed-insert-org-timestamp ()
    "Put an orgmode timestamp into an org '*' timestamp"
    (interactive)
    (insert "* ")
    (org-time-stamp-inactive))

  ;; lets use f1 for all org stuff, help is still C-h
  (global-unset-key [f1])
  (global-unset-key [f2])
  (global-set-key (kbd "<f2>") 'org-agenda)
  (global-set-key (kbd "<f1> t") 'ed-insert-org-timestamp)
  (global-set-key (kbd "<f1> i") 'ed-punch-in)
  (global-set-key (kbd "<f1> o") 'ed-punch-out)


  (defun ed-punch-in (arg)
    "Start continuous clocking and set the default task to the selected task.
  If no task is selected set the Organization task as the default task."
    (interactive "p")
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;;  We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
             (org-agenda-clock-in '(16))
           (ed-clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
        ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)))
            (org-clock-in '(16))
          (ed-clock-in-organization-task-as-default)))))

  (defun ed-punch-out ()
    (interactive)
    (when (org-clock-is-active)
      (org-clock-out)))

  (defvar ed-organization-task-id "cb8f13e6-4142-489b-9a97-247ba85e9102")

  (defun ed-clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find ed-organization-task-id 'marker)
      (org-clock-in '(16))))


  (defun ed-clock-in-to-open (kw)
    "Switch a task from TODO to OPEN when clocking in."
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO")))
        "OPEN"))))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; enable org mode babel languages
  ;;
  ;;
  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     ))

  ;;
  ;; C-mode customisation
  ;;
  ;;
  ;;  use M-x c-set-style
  ;;

  ;; need font locking regardless
  (setq font-lock-maximum-size 1000000)

       ;; Here's a sample .emacs file that might help you along the way.  Just
       ;; copy this region and paste it into your .emacs file.  You may want to
       ;; change some of the actual values.

       ;; C-c C-o changes indentation for a symbol
       ;; C-c C-s shows syntactic symbol

       (defconst my-c-style
         '((c-tab-always-indent        . t)
           (c-comment-only-line-offset . 0)
           (c-hanging-braces-alist     . ((substatement-open after)
                                          (brace-list-open)))
           (c-hanging-colons-alist     . ((member-init-intro before)
                                          (inher-intro)
                                          (case-label after)
                                          (label after)
                                          (access-label after)))
           (c-cleanup-list             . (scope-operator
                                          empty-defun-braces
                                          defun-close-semi))
           (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                          (substatement-open . 0)
                                          (case-label        . 4)
                                          (block-open        . 0)
  						(label . 4)
  						(class-open  . 0)
  						(class-close . 0)
  						(defun-open  . 0)
  						(defun-close . 0)
  						(defun-block-intro . 4)
  						(topmost-intro     . 0)
  						(topmost-intro-cont . 0)
  						(comment-intro     . 0)
  						(knr-argdecl-intro . -)))
           (c-echo-syntactic-information-p . t)
           )
         "My C Programming Style")

       (defconst wrs-c-style
         '((c-tab-always-indent        . t)
           (c-comment-only-line-offset . 0)
           (c-hanging-braces-alist     . ((substatement-open after)
                                          (brace-list-open)))
           (c-hanging-colons-alist     . ((member-init-intro before)
                                          (inher-intro)
                                          (case-label after)
                                          (label after)
                                          (access-label after)))
           (c-cleanup-list             . (scope-operator
                                          empty-defun-braces
                                          defun-close-semi))
           (c-offsets-alist            . ((arglist-close . c-lineup-arglist-close-under-paren)
  						(topmost-intro     . 0)
  						(topmost-intro-cont . 4)
  						(class-open  . 4)
  						(class-close . 4)
  						(defun-open  . 4)
  						(defun-close . 0)
  						(defun-block-intro . 0)
  						(substatement-open . 4)
  						(brace-list-open . 4)
  						(statement-block-intro . 0)
  						(case-label        . 0)
  						(statement-case-intro . 4)
  						(block-open        . 0)
  						(arglist-intro . 0)
  						(knr-argdecl-intro . -)))
           (c-echo-syntactic-information-p . t)
           )
         "WRS Programming Style")


       ;; offset customizations not in my-c-style
       (setq c-offsets-alist '((member-init-intro . ++)))


       ;; Customizations for all modes in CC Mode.
       (defun my-c-mode-common-hook ()
         ;; add my personal style and set it for the current buffer
         ;; other customizations
         (c-add-style "personal" my-c-style t)
         (c-add-style "wrs" wrs-c-style t)

         ;;
         ;; set the default style
         ;;
         (c-set-style "personal")

         (setq tab-width 4
               ;; this will make sure spaces are used instead of tabs
               indent-tabs-mode nil)
         (setq show-trailing-whitespace nil)
         ;; we like auto-newline and hungry-delete
         ;; Ed: I bloody hate it!
         ;;(c-toggle-auto-hungry-state 0)
         ;; keybindings for all supported languages.  We can put these in
         ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
         ;; java-mode-map, idl-mode-map, and pike-mode-map inherit from it.
         (define-key c-mode-base-map "\C-m" 'c-context-line-break)
         )

       (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

       ;;
       ;; Insert some WR function headers
       ;;
       (defun insert-wr-func-header ()
         "Insert a WindRiver function header at cursor point"
         (interactive)
         (insert "/******************************************************************************\n")
         (insert "*\n")
         (insert "*\n")
         (insert "*\n")
         (insert "* RETURNS: \n")
         (insert "*/\n\n"))

       (global-set-key [f5] 'insert-wr-func-header)
  )


;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(c-default-style
   '((c-mode . "personal")
     (c++-mode . "personal")
     (java-mode . "java")
     (awk-mode . "awk")
     (other . "gnu")))
 '(evil-want-Y-yank-to-eol nil)
 '(make-backup-files t)
 '(temporary-file-directory "c:/Home/backup"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ediff-current-diff-A ((t (:extend t :background "red" :foreground "white smoke"))))
 '(ediff-current-diff-B ((t (:extend t :background "forest green" :foreground "white smoke"))))
 '(ediff-fine-diff-A ((t (:background "yellow" :foreground "black"))))
 '(ediff-fine-diff-B ((t (:background "yellow" :foreground "black")))))
)
